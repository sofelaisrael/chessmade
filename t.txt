import { RxCaretDown } from "react-icons/rx";
import { MdNavigateBefore } from "react-icons/md";
import { MdNavigateNext } from "react-icons/md";
import { FaChessKnight } from "react-icons/fa";
import { TiEquals } from "react-icons/ti";
import { BiPlus, BiMinus } from "react-icons/bi";
import React, { useState, useEffect, useRef } from "react";
import { getMonthlyGames } from "../lib/chesscom";
import Skeleton, { SkeletonTheme } from "react-loading-skeleton";
import "react-loading-skeleton/dist/skeleton.css";
import { format, isBefore, isAfter, startOfMonth, endOfMonth } from "date-fns";

const GamesList = ({
  username = "",
  onSelectGame,
  fullgames = [],
  archives,
  setSelectedYear,
  selectedYear,
}) => {
  useEffect(() => {
    if (archives[selectedYear]?.length > 0) {
      // Sort months descending and pick the last one user played in that year
      const sortedMonths = [...archives[selectedYear]].sort((a, b) => b - a);
      const latestMonth = parseInt(sortedMonths[0]); // e.g. 12 for December
      const defaultDate = new Date(parseInt(selectedYear), latestMonth - 1); // JS months are 0-indexed
      setSelectedMonth(defaultDate);
    }
  }, [selectedYear, archives]);

  const [games, setGames] = useState([]); // Games fetched for the selected month
  const [statsFilteredGames, setStatsFilteredGames] = useState([]); // Games filtered by stats
  const [loading, setLoading] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const gamesPerPage = 6;
  const [selectedMonth, setSelectedMonth] = useState(() => new Date());
  const [filters, setFilters] = useState({
    result: "all", // win, loss, draw, all
    color: "all", // white, black, all
  });
  const indexOfLastGame = currentPage * gamesPerPage;
  const indexOfFirstGame = indexOfLastGame - gamesPerPage;
  const currentStatsGames = statsFilteredGames.slice(
    indexOfFirstGame,
    indexOfLastGame
  );
  const [showResultDropdown, setShowResultDropdown] = useState(false);
  const [showColorDropdown, setShowColorDropdown] = useState(false);
  const [showYearDropdown, setShowYearDropdown] = useState(false);

  const resultRef = useRef(null);
  const colorRef = useRef(null);
  const yearRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (e) => {
      if (resultRef.current && !resultRef.current.contains(e.target)) {
        setShowResultDropdown(false);
      }
      if (colorRef.current && !colorRef.current.contains(e.target)) {
        setShowColorDropdown(false);
      }
      if (yearRef.current && !yearRef.current.contains(e.target)) {
        setShowYearDropdown(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleNextPage = () => {
    if (currentPage < Math.ceil(statsFilteredGames.length / gamesPerPage)) {
      setCurrentPage((prevPage) => prevPage + 1);
    }
  };

  const handlePreviousPage = () => {
    if (currentPage > 1) {
      setCurrentPage((prevPage) => prevPage - 1);
    }
  };

  const formatTimeControl = (timeControl) => {
    const [initial, increment] = timeControl.split("+").map(Number);
    return `${initial / 60} min${increment ? ` + ${increment}s` : ""}`;
  };

  const handleFilterChange = (filterName, value) => {
    setFilters((prevFilters) => ({
      ...prevFilters,
      [filterName]: value,
    }));
  };

  useEffect(() => {
    const fetchGames = async () => {
      setLoading(true);
      try {
        const monthlyGames = await getMonthlyGames(
          username,
          selectedMonth.getFullYear(),
          selectedMonth.getMonth() + 1
        );
        setGames(monthlyGames);
        setLoading(false);
      } catch (error) {
        console.error("Failed to fetch games:", error);
        setLoading(true);
      }
    };

    fetchGames();
  }, [username, selectedMonth]);

  useEffect(() => {
    const applyStatsFilters = () => {
      let filtered = games;

      if (filters.result !== "all") {
        filtered = filtered.filter((game) => {
          // console.log(game)
          const playerColor =
            game.white.username.toLocaleLowerCase() === username
              ? "white"
              : "black";
          if (filters.result === "win") {
            return (
              (playerColor === "white" && game.white.result === "win") ||
              (playerColor === "black" && game.black.result === "win")
            );
          }
          if (filters.result === "loss") {
            return (
              (playerColor === "white" && game.black.result === "win") ||
              (playerColor === "black" && game.white.result === "win")
            );
          }
          if (filters.result === "draw") {
            return (
              game.white.result === "insufficient" ||
              game.white.result === "repetition" ||
              game.white.result === "agreed" ||
              game.white.result === "50move" ||
              game.white.result === "stalemate" ||
              game.white.result === "timevsinsufficient" ||
              game.white.result === "timeoutvsinsufficient"
            );
          }
          return true;
        });
      }

      if (filters.color !== "all") {
        filtered = filtered.filter((game) => {
          const playerColor =
            game.white.username.toLocaleLowerCase() === username
              ? "white"
              : "black";
          return playerColor === filters.color;
        });
      }

      setStatsFilteredGames(filtered);
      setCurrentPage(1);
    };

    applyStatsFilters();
  }, [games, filters]);

  return (
    <div>
      {/* Month Selector Grid */}
      <div className="flex justify-between max-md:flex-col">
        <div className="flex gap-3 w-[70%] flex-wrap max-md:w-full max-md:gap-x-1 max-md:justify-evenly">
          {Array.from({ length: 12 }).map((_, index) => {
            const monthDate = new Date(0, index); // dummy date to get month name
            const monthName = monthDate.toLocaleString("default", {
              month: "short",
            });
            const monthNumber = (index + 1).toString().padStart(2, "0");
            const isAvailable = archives[selectedYear]?.includes(monthNumber);

            return (
              <button
                key={index}
                className={`rounded text-sm w-[50px] h-[30px] ${
                  isAvailable
                    ? "bg-[#1e1e1e] text-white hover:bg-[#fff] cursor-pointer hover:text-[#1e1e1e]"
                    : "bg-gray-200 opacity-25 text-gray-400"
                } ${
                  selectedMonth.getMonth() === index
                    ? "bg-[#373D49] border border-[#777]"
                    : ""
                }`}
                disabled={!isAvailable}
                onClick={() =>
                  setSelectedMonth(new Date(parseInt(selectedYear), index))
                }
              >
                {monthName}
              </button>
            );
          })}
        </div>

        <div className="relative max-md:pt-2 max-md:ml-auto" ref={yearRef}>
          <button
            onClick={() => setShowYearDropdown(!showYearDropdown)}
            className="p-2 border rounded text-white bg-[#1e1e1e] w-24 flex items-center justify-between border-[#777]"
          >
            {selectedYear}

            <RxCaretDown />
          </button>
          {showYearDropdown && (
            <ul className="absolute z-10 mt-1 bg-[#1e1e1e] border rounded w-24 text-white border-[#777]">
              {Object.keys(archives)
                .sort((a, b) => b - a)
                .map((yearOption) => (
                  <li
                    key={yearOption}
                    className="px-4 py-2 hover:bg-[#333] cursor-pointer"
                    onClick={() => {
                      setSelectedYear(yearOption);
                      setShowYearDropdown(false);
                    }}
                  >
                    {yearOption}
                  </li>
                ))}
            </ul>
          )}
        </div>
      </div>

      {/* Stats Filters */}
      <div className="flex space-x-4 items-center my-4 max-md:gap-3 relative max-md:flex-col max-md:items-start">
        {/* Result Filter */}
        <div className="res flex items-center gap-5  ">
          <span className="text-white font-bold">Results:</span>
          <div className="relative" ref={resultRef}>
            <button
              onClick={() => setShowResultDropdown(!showResultDropdown)}
              className="p-2 border rounded text-white bg-[#1e1e1e] w-32 text-left flex items-center justify-between relative border-[#777]"
            >
              {filters.result.charAt(0).toUpperCase() + filters.result.slice(1)}
              <RxCaretDown />
            </button>
            {showResultDropdown && (
              <ul className="absolute z-10 mt-1 bg-[#1e1e1e] border rounded w-32 text-white border-[#777]">
                {["all", "win", "loss", "draw"].map((option) => (
                  <li
                    key={option}
                    className="px-4 py-2 hover:bg-[#333] cursor-pointer"
                    onClick={() => {
                      handleFilterChange("result", option);
                      setShowResultDropdown(false);
                    }}
                  >
                    {option.charAt(0).toUpperCase() + option.slice(1)}
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
        <div className="col  items-center flex gap-5">
          <span className="text-white font-bold ">Colors:</span>
          {/* Color Filter */}
          <div className="relative" ref={colorRef}>
            <button
              onClick={() => setShowColorDropdown(!showColorDropdown)}
              className="p-2 border rounded text-white bg-[#1e1e1e] w-32 text-left flex justify-between items-center relative border-[#777]"
            >
              {filters.color.charAt(0).toUpperCase() + filters.color.slice(1)}
              <RxCaretDown />
            </button>
            {showColorDropdown && (
              <ul className="absolute z-10 mt-1 bg-[#1e1e1e] border rounded w-32 text-white overflow-hidden border-[#777]">
                {["all", "white", "black"].map((option) => (
                  <li
                    key={option}
                    className="px-4 py-2 hover:bg-[#333] cursor-pointer"
                    onClick={() => {
                      handleFilterChange("color", option);
                      setShowColorDropdown(false);
                    }}
                  >
                    {option.charAt(0).toUpperCase() + option.slice(1)}
                  </li>
                ))}
              </ul>
            )}
          </div>
        </div>
      </div>

      {/* Stats Filtered Games */}
      <div>
        
        {loading ? (
          <SkeletonTheme baseColor="#1e1e1e" highlightColor="#292929">
            <Skeleton containerClassName="skeleton" count={6} />
          </SkeletonTheme>
        ) : (
          <ul className=" flex flex-wrap gap-4 place-items-start">
            {currentStatsGames.map((game) => {
              const playerColor =
                game.white.username === username ? "white" : "black";
              // console.log(game)
              return (
                <li
                  key={game.url}
                  className="border rounded-lg p-4 text-white border-[#494949] cursor-pointer transition-colors bg-[#1e1e1e] hover:bg-[#1a1a1a] w-[250px] max-md:w-full"
                  onClick={() => onSelectGame(game)}
                >
                  <div className="flex">
                    <div className="side flex flex-col gap-5 w-full">
                      <div className="white flex items-center justify-between">
                        <div className="user flex items-center gap-2">
                          <div className="bg-white rounded-full size-3" />
                          <span className="font-medium">
                            {game.white.username.slice(0, 12)}{" "}
                            {game.white.username.length > 12 ? "..." : ""}
                          </span>
                          <span className="text-gray-500">
                            ({game.white.rating})
                          </span>
                        </div>

                        <div className="white result">
                          {game.white.result === "win" ? (
                            <BiPlus className="bg-[#69923e] text-white text-[20px]" />
                          ) : game.black.result === "win" ? (
                            <BiMinus className="bg-[#964d22] text-white text-[20px]" />
                          ) : (
                            <TiEquals className="bg-gray-500 text-white text-[20px]" />
                          )}
                        </div>
                      </div>

                      <div className="black flex items-center justify-between">
                        <div className="user flex items-center gap-2">
                          <div className="bg-black rounded-full size-3" />
                          <span className="font-medium">
                            {game.black.username.slice(0, 12)}{" "}
                            {game.black.username.length > 12 ? "..." : ""}
                          </span>
                          <span className="text-gray-500">
                            ({game.black.rating})
                          </span>
                        </div>

                        <div className="result">
                          <div className="black">
                            {game.black.result === "win" ? (
                              <BiPlus className="bg-[#69923e] text-white text-[20px]" />
                            ) : game.white.result === "win" ? (
                              <BiMinus className="bg-[#964d22] text-white text-[20px]" />
                            ) : (
                              <TiEquals className="bg-gray-500 text-white text-[20px]" />
                            )}
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <div className="flex items-center space-x-2">
                          <div
                            className={`w-3 h-3 rounded-full bg-gray-800`}
                          ></div>
                          <span className="font-medium">
                            {game.black.username}
                          </span>
                        </div>
                        <span className="text-gray-600">
                          {game.black.rating}
                        </span>
                      </div>
                      <div className="flex items-center justify-between mt-2">
                        <div className="flex items-center space-x-2">
                          {/* <Star size={16} className="text-gray-500" /> 
                          <span className="text-sm text-gray-600">
                            {game.rated ? "Rated" : "Unrated"}
                          </span>
                        </div>
                        <a
                          href={game.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center space-x-1 text-blue-600 hover:text-blue-800 text-sm"
                          onClick={(e) => e.stopPropagation()}
                        >
                          {/* <ExternalLink size={14} /> 
                          <span>Chess.com</span>
                        </a>
                      </div>
                    </div> */}
                  </div>

                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600 my-3">
                      {game.time_class} • {formatTimeControl(game.time_control)}
                    </span>

                    <span className="rated my-3 text-sm text-gray-600">
                      {game.rated ? "rated" : "unrated"}{" "}
                    </span>
                  </div>
                </li>
              );
            })}
          </ul>
        )}
      </div>

      {/* Pagination */}
      {currentStatsGames.length > 1 && (
        <div className="flex mt-4 text-white items-center gap-5">
          <button
            onClick={handlePreviousPage}
            disabled={currentPage === 1}
            className="p-2 border border-[#777] rounded disabled:opacity-50"
          >
            <MdNavigateBefore />
          </button>
          <span>
            {currentPage} /{" "}
            {Math.ceil(statsFilteredGames.length / gamesPerPage)}
          </span>
          <button
            onClick={handleNextPage}
            disabled={
              currentPage ===
              Math.ceil(statsFilteredGames.length / gamesPerPage)
            }
            className="p-2  border border-[#777] rounded disabled:opacity-50"
          >
            <MdNavigateNext />
          </button>
        </div>
      )}
    </div>
  );
};

export default GamesList;























import { RxCaretRight } from "react-icons/rx";
import { MdKeyboardArrowRight } from "react-icons/md";
import { BiUser } from "react-icons/bi";
import { FaChessPawn } from "react-icons/fa";
import { CgUser } from "react-icons/cg";
import { AiOutlineSearch } from "react-icons/ai";
import React, { useState, useEffect } from "react";
import ChessBoard from "./components/ChessBoard";
import GamesList from "./components/GamesList";
import "./App.css";
import defaultimg from "./assets/default.png";
import { getMonthlyGames } from "./lib/chesscom";
import ecoA from "./data/ecoA.json";
import ecoB from "./data/ecoB.json";
import ecoC from "./data/ecoC.json";
import ecoD from "./data/ecoD.json";
import ecoE from "./data/ecoE.json";
import { Chess } from "chess.js";


// Build fast-access Map for all ECO openings
const combinedOpenings = { ...ecoA, ...ecoB, ...ecoC, ...ecoD, ...ecoE };
const openingMap = new Map();

Object.values(combinedOpenings).forEach((obj) => {
  if (obj?.eco && obj?.name) {
    const baseName = obj.name.split(/[:|,]/)[0].trim();
    if (!openingMap.has(baseName)) {
      openingMap.set(baseName, []);
    }
    openingMap.get(baseName).push(normalizeMoves(obj.moves));
  }
});

function normalizeMoves(moves) {
  return moves.replace(/\d+\.\s?/g, "").trim();
}

function App() {
  const [username, setUsername] = useState("");
  const [profile, setProfile] = useState(null);
  const [selectedGame, setSelectedGame] = useState(null);
  const [startDate, setStartDate] = useState(null);
  const [allGames, setAllGames] = useState([]);
  const [filteredGames, setFilteredGames] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [opponentList, setOpponentList] = useState([]);
  const [showAnalytics, setShowAnalytics] = useState(false);
  const [loading, setLoading] = useState(false);
  const [progress, setProgress] = useState(0);
  const [hasSelectedFilter, setHasSelectedFilter] = useState(false);
  const [showDropdown, setShowDropdown] = useState(false);
  const [isFiltering, setIsFiltering] = useState(false);

  const [archives, setArchives] = useState({});
  const [year, setYear] = useState(null);

  const handleUserSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setProgress(0);
    setHasSelectedFilter(false);

    try {
      const res = await fetch(`https://api.chess.com/pub/player/${username}`);
      const data = await res.json();
      setProfile(data);

      if (data.joined) {
        const joinedDate = new Date(data.joined * 1000);
        setStartDate(joinedDate);

        const currentDate = new Date();
        const games = [];
        const totalMonths =
          (currentDate.getFullYear() - joinedDate.getFullYear()) * 12 +
          (currentDate.getMonth() - joinedDate.getMonth() + 1);
        let completedMonths = 0;

        for (
          let year = joinedDate.getFullYear();
          year <= currentDate.getFullYear();
          year++
        ) {
          const startMonth =
            year === joinedDate.getFullYear() ? joinedDate.getMonth() + 1 : 1;
          const endMonth =
            year === currentDate.getFullYear()
              ? currentDate.getMonth() + 1
              : 12;

          for (let month = startMonth; month <= endMonth; month++) {
            const monthlyGames = await getMonthlyGames(username, year, month);
            games.push(...monthlyGames);

            completedMonths++;
            setProgress(Math.round((completedMonths / totalMonths) * 100));
          }
        }

        setAllGames(games);
        setFilteredGames(games);
      }
    } catch (err) {
      console.error("Error fetching profile/games:", err);
    } finally {
      setLoading(false);
    }
  };

  // Run generateOpponentOpeningList in background after profile and games are loaded
  useEffect(() => {
    if (profile && allGames.length > 0) {
      setTimeout(() => {
        const list = generateOpponentOpeningList(allGames);
        setOpponentList(list);
      }, 100); // small async delay to avoid blocking main thread
    }
  }, [profile, allGames]);

  const generateOpponentOpeningList = (games) => {
    const opponentMap = new Map();
    const openingMapCount = new Map();

    for (const game of games) {
      const opponent =
        game.white.username.toLowerCase() === username.toLowerCase()
          ? game.black.username
          : game.white.username;

      if (opponent) {
        opponentMap.set(opponent, (opponentMap.get(opponent) || 0) + 1);
      }

      try {
        const chess = new Chess();
        chess.loadPgn(game.pgn);
        const headers = chess.header();
        const eco = headers["ECO"] || null;
        const moves = chess.history().join(" ");
        const openingName = getOpeningNameFromMoves(moves, eco);

        if (openingName) {
          openingMapCount.set(
            openingName,
            (openingMapCount.get(openingName) || 0) + 1
          );
        }
      } catch (err) {
        continue;
      }
    }

    const opponentList = Array.from(opponentMap.entries()).map(
      ([value, count]) => ({ type: "opponent", value, count })
    );

    const openingList = Array.from(openingMapCount.entries()).map(
      ([value, count]) => ({ type: "opening", value, count })
    );

    return [...opponentList, ...openingList];
  };

  const getOpeningNameFromMoves = (moves, ecoCode = null) => {
    const normalized = normalizeMoves(moves);

    // If ECO code is provided, try to match from that section first
    if (ecoCode) {
      const candidates = Object.values(combinedOpenings).filter(
        (o) => o.eco === ecoCode
      );

      for (const opening of candidates) {
        const openingMoves = normalizeMoves(opening.moves);
        if (normalized.startsWith(openingMoves)) {
          return opening.name.split(/[:|,]/)[0].trim(); // Return base name
        }
      }
    }

    // Fallback: try to match from all known moves if ECO fails
    for (const [name, moveList] of openingMap.entries()) {
      for (const sequence of moveList) {
        if (normalized.startsWith(sequence)) {
          return name;
        }
      }
    }

    return null;
  };

  const handleSearch = (e) => {
    e.preventDefault();
    filterGames(searchQuery);
  };

  const handleSearchQueryChange = (e) => {
    setSearchQuery(e.target.value);
  };

  const filterGames = (query) => {
    const q = query.toLowerCase();
    const filtered = allGames.filter((game) => {
      const opponent =
        game.white.username.toLowerCase() === username.toLowerCase()
          ? game.black.username
          : game.white.username;

      const chess = new Chess();
      try {
        chess.loadPgn(game.pgn);
        const moves = chess.history().join(" ");
        const opening = getOpeningNameFromMoves(moves)?.toLowerCase() || "";
        return opponent.toLowerCase().includes(q) || opening.includes(q);
      } catch {
        return false;
      }
    });

    setFilteredGames(filtered);
    setHasSelectedFilter(true);
  };

  const handleDropdownSelect = async (item) => {
    setSearchQuery(item.value);
    setHasSelectedFilter(true);
    setIsFiltering(true); // start loading

    try {
      if (item.type === "opponent") {
        const filtered = allGames.filter((game) => {
          const opponent =
            game.white.username.toLowerCase() === username.toLowerCase()
              ? game.black.username
              : game.white.username;

          return opponent.toLowerCase() === item.value.toLowerCase();
        });

        setFilteredGames(filtered);
        setSelectedGame(null);
      }

      if (item.type === "opening") {
        const filtered = allGames.filter((game) => {
          try {
            const chess = new Chess();
            chess.loadPgn(game.pgn);
            const headers = chess.header();
            const eco = headers["ECO"] || null;
            const moves = chess.history().join(" ");
            const opening = getOpeningNameFromMoves(moves, eco);

            return opening?.toLowerCase() === item.value.toLowerCase();
          } catch {
            return false;
          }
        });

        setFilteredGames(filtered);
        setSelectedGame(null);
      }
    } finally {
      setIsFiltering(false); // end loading
    }
  };

  useEffect(() => {
    const fetchArchives = async () => {
      try {
        const res = await fetch(
          `https://api.chess.com/pub/player/${username}/games/archives`
        );
        const data = await res.json();

        const map = {};

        data.archives.forEach((url) => {
          const match = url.match(/\/(\d{4})\/(\d{1,2})$/);
          if (match) {
            const year = match[1];
            const month = match[2].padStart(2, "0");

            if (!map[year]) map[year] = [];
            map[year].push(month);
          }
        });

        // Sort months numerically for each year
        Object.keys(map).forEach((year) => {
          map[year] = map[year].sort((a, b) => Number(a) - Number(b));
        });

        const sortedYears = Object.keys(map).sort((a, b) => b - a); // most recent first

        setArchives(map);
        if (sortedYears.length > 0) {
          setYear(sortedYears[0]);
        }
        console.log(year, sortedYears, map);
      } catch (error) {
        console.error("Failed to fetch archives:", error);
      }
    };

    if (username) {
      fetchArchives();
    }
  }, [profile?.username]);

  return (
    <div className="min-h-screen bg-[#0D0D0D]">
      {profile && (
        <header className="shadow-md flex justify-between px-10 py-5 items-center max-md:px-5 gap-5 relative">
          <div className="flex gap-10 justify-between items-center h-full">
            <div className="text-3xl font-bold text-[#fff] max-lg:text-xl max-md:text-lg">
              ChessMade
            </div>
          </div>

          <div className="flex items-center space-x-4 h-full">
            <div className="text-xl font-semibold text-[#fff]">
              {profile?.username}
            </div>
            <img
              src={profile?.avatar || defaultimg}
              alt={profile?.username}
              className="w-12 h-12 rounded-full max-lg:size-10 max-md:size-9"
            />
          </div>
        </header>
      )}

      {/* MAIN */}
      <main className="max-w-7xl mx-auto px-4 py-6">
        {!profile && !loading ? (
          <div className="flex flex-col items-center h-[80vh] px-10 max-md:px-5 justify-center space-y-6">
            <h2 className="text-2xl font-semibold text-white text-center">
              Enter your Chess.com username
            </h2>
            <form onSubmit={handleUserSubmit} className="w-full max-w-md">
              <div className="relative">
                <input
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="w-full px-4 py-2 outline-none focus:border-[#5ED3F3] border border-transparent rounded-lg bg-[#1e1e1e] text-white placeholder:text-[#a0a0a0]"
                  placeholder="Username"
                />
                <button
                  type="submit"
                  className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600"
                >
                  <AiOutlineSearch size={20} />
                </button>
              </div>
            </form>
          </div>
        ) : loading ? (
          <div className="flex flex-col items-center h-[60vh] justify-center">
            <h2 className="text-xl font-semibold text-gray-700 ttext-center">
              Fetching games for {username}...
            </h2>
            <div className="w-full max-w-md bg-gray-200 rounded-full h-4 mt-4">
              <div
                className="bg-blue-500 h-4 rounded-full"
                style={{ width: `${progress}%` }}
              ></div>
            </div>
            <p className="text-gray-600 mt-2">{progress}% completed</p>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-1">
              <div className="py-4 w-full">
                <div className="flex flex-col space-y-2 relative">
                  <form onSubmit={handleSearch} className="relative">
                    <input
                      type="text"
                      placeholder="Search opponents or openings..."
                      value={searchQuery}
                      onChange={handleSearchQueryChange}
                      onFocus={() => setShowDropdown(true)}
                      onBlur={() =>
                        setTimeout(() => setShowDropdown(false), 150)
                      } // slight delay to allow click
                      className="w-full px-4 py-2 border border-transparent rounded-lg outline-none bg-[#1A1A1A] text-white focus:border-[#5ED3F3]"
                    />

                    <button
                      type="submit"
                      className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400"
                    >
                      <AiOutlineSearch size={20} />
                    </button>
                  </form>
                  {showDropdown && opponentList.length > 0 && searchQuery && (
                    <ul className="rounded shadow-md max-h-40 overflow-y-auto abste bottom-0">
                      {opponentList
                        .filter((item) =>
                          item.value
                            .toLowerCase()
                            .includes(searchQuery.toLowerCase())
                        )
                        .map((item, index) => (
                          <li
                            key={index}
                            className="px-4 py-2 hover:bg-[#171D27] text-white cursor-pointer flex justify-between go  mr-2 rounded"
                            onClick={() => handleDropdownSelect(item)}
                          >
                            <span>
                              <span className="text-sm gap-2 flex items-center ">
                                {item.type === "opponent" ? (
                                  <CgUser />
                                ) : (
                                  <FaChessPawn />
                                )}
                                {item.value}
                              </span>
                            </span>
                            <span className="text-sm font-bold">
                              {item.count}
                              {/* [{item.type}] */}
                            </span>
                          </li>
                        ))}
                    </ul>
                  )}
                </div>
              </div>

              <ChessBoard
                game={selectedGame}
                pgn={selectedGame?.pgn}
                username={profile.username}
                whiteresult={selectedGame?.white.result}
                blackresult={selectedGame?.black.result}
              />

              {hasSelectedFilter && (
                <div className="bg-[#1e1e1e] text-white shadow-md rounded-lg p-4 mt-4">
                  <h2 className="text-xl font-semibold mb-4">
                    Games with Selected Opening/Opponent
                  </h2>
                  {isFiltering ? (
                    <p className="text-gray-500 italic">Loading games...</p>
                  ) : filteredGames.length === 0 ? (
                    <p className="text-gray-500">No games found.</p>
                  ) : (
                    <ul className="space-y-2">
                      {filteredGames.map((game, index) => (
                        <li
                          key={index}
                          className="p-2 border border-[#494949] rounded-lg hover:bg-[#333] cursor-pointer flex items-center justify-between"
                          onClick={() => setSelectedGame(game)}
                        >
                          <div className="flex items-center gap-3">
                            <BiUser />
                            {game.white.username.toLocaleLowerCase() ===
                            username.toLocaleLowerCase() ? (
                              <div className="flex items-center gap-3">
                                {game.black.username}
                                <div className="size-3 bg-black rounded-full border "></div>
                              </div>
                            ) : (
                              <div className="flex items-center gap-3">
                                {game.white.username}
                                <div className="size-3 bg-white rounded-full border "></div>
                              </div>
                            )}
                          </div>
                          <div className=" flex items-center gap-2">
                            {game.white.username.toLocaleLowerCase() ===
                            username.toLocaleLowerCase()
                              ? game.white.result
                              : game.black.result}
                            <RxCaretRight />
                          </div>
                        </li>
                      ))}
                    </ul>
                  )}
                </div>
              )}

            </div>

            <div className="lg:col-span-2 pt-5">
              <GamesList
                username={username}
                games={filteredGames}
                onSelectGame={setSelectedGame}
                archives={archives}
                selectedYear={year}
                setSelectedYear={setYear}
              />
            </div>
          </div>
        )}
      </main>
    </div>
  );
}

export default App;
